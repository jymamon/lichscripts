=begin

    Bard script for sorting gems by value.

    ;SortGems --help

     author: Jymamon (gs4-jymamon@hotmail.com)
       game: Gemstone
       tags: bard,gems,1004
    version: 2018.02.18.01

    history:
        2018.02.18.01 - Created

=end

# -----------------------------------------------------------------------------
# Require the helper library as I'm tired of C+P many of the same code blocks.
# -----------------------------------------------------------------------------
if File.file?("#{$script_dir}/cantrips.lic")
    load("#{$script_dir}/cantrips.lic")
else
    echo "\n\ncantrips.lic is required: ';repos download cantrips.lic'\n\n"
    exit
end

if ( $CantripsVer < "2015.03.29.01" )
    Cantrips::Message.bold "-- Running with an untested version of cantrips.  This may not work."
end

class SortGems
    # -----------------------------------------------------------------------------
    # Generic loresong taken from the pure.lic
    # -----------------------------------------------------------------------------
    @@loresong = ", I ask this favor of you;Tell my your true value"

    # -----------------------------------------------------------------------------
    # Option parsing/setup
    # -----------------------------------------------------------------------------
    require 'optparse'

    Options = Struct.new(:lootsack, :sacks)

    class Parser
        def self.parse(options)
            args = Options.new()

            # defaults
            args.lootsack = Vars.lootsack
            args.sacks    = Vars.sacks || Hash.new

            opt_parser = OptionParser.new { |opts|
                opts.banner = "Usage: SortGems.lic [options]"

                opts.on("-lLOOTSACK", "--lootsack=LOOTSACK", "Where to get gems. Defaults to Vars.lootsack. Gems that do not meet a particular SACK threshold will go back here.") { |parameter|
                    args.lootsack = parameter
                }

                opts.on("-sSACK=VALUE", "--sack=SACK=MINVALUE", "Put gems of at least MINVALUE into SACK.  Gems will go to highest MINVALUE sack appropriate.") { |parameter|
                    parameter =~ /(.*)=(.*)/
                    sack = $1
                    value = $2.to_i

                    args.sacks[value] = sack
                }

                opts.on("-h", "--help", "Prints this help") {
                    echo opts.to_s
                    exit
                }
            }

            opt_parser.parse!(options)

            # Hack-ish but sufficient for catching unused parameters
            if ( options.any? )
                opt_parser.parse("--help")
            end

            error = false

            if ( args.lootsack.nil? )
                echo "lootsack must be set in vars or passed as an option"
                error = true
            end

            if error then exit end

            # Tranlate to game objects
            args.lootsack = Cantrips::Items.find(args.lootsack)

            args.sacks.each{|value, sack|
                args.sacks[value] = Cantrips::Items.find(sack)
            }

            return args
        end

    end

    def self.get_gem_value(gem)
        result = -1

        wait_until('Waiting on mana...') { mana(15) }

        value_line = dothistimeout(
            "loresing #{gem.noun}#{@@loresong}",
            15,
            /it's worth about/);

        if ( value_line =~ /it's worth about ([\d,]+) silvers/)
            result = $1.gsub(/\,/,"").to_i
        end

        waitrt?

        result
    end

    def self.run(parameters)
        options = Parser.parse(parameters)

        timer = Cantrips::Stopwatch.new()
        sung  = 0

        before_dying {
            echo "Sorted #{sung} gems.",
                 "Total time: #{timer.total}. Average time per gem: #{timer.average}"
        }

        # -----------------------------------------------------------------------------
        # Find all gems in the loot sack, call get_gem_value() and handle the result.
        # -----------------------------------------------------------------------------
        Cantrips::Containers.open(options.lootsack.id)

        gems = Cantrips::Containers.find_loot_by_pattern(Cantrips::Patterns.allgems, options.lootsack.id)

        gems.each {|gem|
            timer.start()
            fput "get ##{gem.id}"

            sung += 1
            result = get_gem_value(gem)

            options.sacks.sort_by{|value, sack| value}.reverse().each{|min_value, destination|
                if ( result >= min_value )
                    Cantrips::Items.put_in_container(gem, destination, true)

                    if GameObj.right_hand.id == gem.id
                        respond "Well, hell, that didn't work!"
                        exit
                    end

                    break;
                end
            }

            if GameObj.right_hand.id == gem.id
                Cantrips::Items.put_in_container(gem, options.lootsack, true)
            end

            # Timer includes healing time after shattering a gem.
            timer.stop()
            Cantrips::Message.bold "Last gem took #{timer.last}."

            1.upto(10) {
                break if GameObj.right_hand.id != gem.id
                pause 0.1
            }

            break if GameObj.right_hand.id == gem.id
        }

        Cantrips::Containers.close(options.lootsack.id)
    end
end

SortGems.run(script.vars)
