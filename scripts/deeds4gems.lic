=begin
    Deeds4Gems - Converts gems to deeds.

    By default, it'll try to take you up to 10 deeds using gems from your Vars.gemssack.
    See ';deeds4gems --help' for options to override these defaults.

    Currently, it is working with:
    - River's Rest
    - Ta'Illstim
    - Wehnimer's Landing

    These three don't seem to follow the normal formula for cost
    for high level characters regardless of if considering gems
    at value or at 3x value. The steps have been confirmed with
    multiple low level characters.
    - Northern Caravansary
    - Solhaven
    - Vornavis Caravansary

    Working on:
    - Zul Logoth

    Future work:
    - Icemule
    - Teras Islse

    Not bothering with:
    - Hearthstone Manor
    - Ta'Vallor

     author: Jymamon (gs4-jymamon@hotmail.com)
       game: Gemstone
       tags: deeds
    version: 2016.11.21.01
=end

=begin
    history:
        2016.11.21.01 Add adjustments for trading
        2015.04.01.01 Rename because Gems2Deeds was taken while I was on hiatus.
        2015.03.31.01 Added Zul Logoth
        2015.03.30.01 General scripts updates after hiatus
        2012.02.08.01 Initial release
=end

# -----------------------------------------------------------------------------
# Require the helper library as I'm tired of C+P many of the same code blocks.
# -----------------------------------------------------------------------------
if File.file?("#{$script_dir}/cantrips.lic")
    load("#{$script_dir}/cantrips.lic")
else
    echo "\n\ncantrips.lic is required: ';repos download cantrips.lic'\n\n"
    exit
end

if ( $CantripsVer < "2015.03.31.01" )
    Cantrips::Message.bold "-- cantrips is too old. ';repos update cantrips.lic' and try again."
end

class Deeds4Gems
    # -----------------------------------------------------------------------------
    # Option parsing/setup
    # -----------------------------------------------------------------------------
    require 'optparse'

    Options = Struct.new(:bigspender, :gemsack, :maxdeeds, :noprompt, :richierich)

    class Parser
        def self.parse(options)
            args = Options.new()

            # defaults
            args.gemsack  = Vars.gemsack
            args.maxdeeds = 10

            opt_parser = OptionParser.new { |opts|
                opts.banner = "Usage: deeds4gems.lic [options]"

                opts.on("-b", "--big-spender", "Even if not necessary, (conservatively) use your most valueable gems first.") {
                    args.bigspender = true
                }

                opts.on("-gGEMSACK", "--gemsack=GEMSACK", "Where to get gems from. Defaults to Vars.gemsack.") { |parameter|
                    args.gemsack = parameter
                }

                opts.on("-mMAXDEEDS", "--maxdeeds=MAXDEEDS", "Maxiumum number of deeds to END with. Defaults to 10.") { |parameter|
                    args.maxdeeds = parameter.to_i
                }

                opts.on("-n", "--no-confirm", "You said what you mean and you mean what you said! Don't prompt for anything. Consequences be damned!") {
                    args.noprompt = true
                }

                opts.on("-r", "--richie-rich", "Don't limit yourself to deed methods that count gems at 3x value.") {
                    args.richierich = true
                }

                opts.on("-h", "--help", "Prints this help") {
                    echo opts.to_s
                    exit
                }
            }

            opt_parser.parse!(options)

            # Hack-ish but sufficient for catching unused parameters
            if ( options.any? )
                opt_parser.parse("--help")
            end

            if ( args.gemsack.nil? )
                echo "gemsack must be set in vars or passed as an option"
                exit
            end

            # Tranlate to game objects
            args.gemsack  = Cantrips::Items.find(args.gemsack)

            return args
        end

    end

    def self.get_current_deeds
        deeds = 0
        done  = false

        action = proc { |line|
            if line =~ /\s*Level:.*Deeds:\s*(\d+).*$/
                deeds = $1.to_i
                nil
            elsif line=~ /^\s*(?:Experience|Exp. until next|Mental TPs).*/
                nil
            elsif line =~/^\s*Physical TPs/i
                done = true
                nil
            end
        }

        DownstreamHook.add('get_current_deedsHook', action)
        fput 'exp'
        wait_until { done }
        DownstreamHook.remove('get_current_deedsHook')
        return(deeds.to_i)
    end

    def self.get_gem_values(container)
        town = Room.current.location

        if ( Room.current.id == 10082 )
            # Otherwise it also shows as Ta'Illistim
            town = "Sylvarraend"
        elsif ( Room.current.id == 17436 )
            # Because "between Wehnimer's Landing and Zul Logoth" is just too long
            town = "Khazar's Hold"
        end

        # if nil, value was not available in the wiki and will be treated as 0. Not all of these are
        # used here, but list them all for future re-use
        town_trading_modifier = {
            "Sylvarraend"               => { "Human" =>  -10, "Elf" => nil, "Dwarf" => -15, "Giantman" =>  -5, "Halfling" => nil, "Half-Elf" => -15, "Dark Elf" =>  -25, "Sylvankind" =>   0, "Burghal Gnome" => -15, "Forest Gnome" => nil, "Half-Krolvin" => -15, "Erithian" =>  -5, "Aelotoi" => nil}, 
            "Ta'Illistim"               => { "Human" =>  -10, "Elf" =>   5, "Dwarf" => -15, "Giantman" =>  -5, "Halfling" =>  -5, "Half-Elf" => -15, "Dark Elf" =>  -25, "Sylvankind" =>   0, "Burghal Gnome" =>  -5, "Forest Gnome" =>  -5, "Half-Krolvin" => -15, "Erithian" =>  -5, "Aelotoi" =>  -5}, 
            "Ta'Vaalor"                 => { "Human" =>  -10, "Elf" =>   5, "Dwarf" => -15, "Giantman" =>  -5, "Halfling" =>  -5, "Half-Elf" => -15, "Dark Elf" =>  -25, "Sylvankind" =>   0, "Burghal Gnome" =>  -5, "Forest Gnome" =>  -5, "Half-Krolvin" => -15, "Erithian" =>  -5, "Aelotoi" =>  -5}, 
            "Cysaegir"                  => { "Human" =>   -5, "Elf" =>   0, "Dwarf" =>  -5, "Giantman" =>   0, "Halfling" =>  -5, "Half-Elf" =>  -5, "Dark Elf" =>    0, "Sylvankind" =>   0, "Burghal Gnome" =>  -5, "Forest Gnome" =>  -5, "Half-Krolvin" => -15, "Erithian" =>  -5, "Aelotoi" =>   5}, 
            "the Isle of Four Winds"    => { "Human" =>    0, "Elf" =>   0, "Dwarf" =>   0, "Giantman" =>   0, "Halfling" =>   0, "Half-Elf" =>   0, "Dark Elf" =>    0, "Sylvankind" =>   0, "Burghal Gnome" =>   0, "Forest Gnome" =>   0, "Half-Krolvin" =>   0, "Erithian" =>   0, "Aelotoi" =>   0}, 
            "Icemule Trace"             => { "Human" =>    0, "Elf" =>   0, "Dwarf" =>   0, "Giantman" => nil, "Halfling" =>   5, "Half-Elf" =>   0, "Dark Elf" =>   -5, "Sylvankind" =>   0, "Burghal Gnome" =>  -5, "Forest Gnome" =>   0, "Half-Krolvin" =>   0, "Erithian" =>   0, "Aelotoi" =>   0}, 
            "Khazar's Hold"             => { "Human" =>  nil, "Elf" => nil, "Dwarf" =>   0, "Giantman" => nil, "Halfling" => nil, "Half-Elf" => nil, "Dark Elf" =>  -25, "Sylvankind" =>   0, "Burghal Gnome" =>   0, "Forest Gnome" => nil, "Half-Krolvin" => nil, "Erithian" => nil, "Aelotoi" => nil}, 
            "the Northern Caravansary"  => { "Human" =>    0, "Elf" => nil, "Dwarf" => nil, "Giantman" =>   0, "Halfling" => nil, "Half-Elf" =>   0, "Dark Elf" =>   -5, "Sylvankind" =>   0, "Burghal Gnome" =>  -5, "Forest Gnome" => nil, "Half-Krolvin" => nil, "Erithian" => nil, "Aelotoi" => nil}, 
            "the Pinefar Trading Post"  => { "Human" =>    0, "Elf" => nil, "Dwarf" =>   0, "Giantman" =>   0, "Halfling" =>   5, "Half-Elf" => nil, "Dark Elf" =>   -5, "Sylvankind" =>   0, "Burghal Gnome" =>   0, "Forest Gnome" => nil, "Half-Krolvin" => nil, "Erithian" => nil, "Aelotoi" => nil}, 
            "River's Rest"              => { "Human" =>    5, "Elf" => -10, "Dwarf" =>   0, "Giantman" =>   0, "Halfling" =>   0, "Half-Elf" =>  -5, "Dark Elf" =>  -15, "Sylvankind" =>  -5, "Burghal Gnome" =>   0, "Forest Gnome" =>   0, "Half-Krolvin" => -15, "Erithian" =>  -5, "Aelotoi" =>  -5}, 
            "the free port of Solhaven" => { "Human" =>    5, "Elf" =>   0, "Dwarf" =>   0, "Giantman" =>   0, "Halfling" =>   0, "Half-Elf" =>  -5, "Dark Elf" =>  -25, "Sylvankind" => -15, "Burghal Gnome" =>  -5, "Forest Gnome" =>   0, "Half-Krolvin" =>   0, "Erithian" =>   0, "Aelotoi" =>   0}, 
            "Wehnimer's Landing"        => { "Human" =>    0, "Elf" =>   0, "Dwarf" =>   0, "Giantman" =>   0, "Halfling" =>   0, "Half-Elf" =>   0, "Dark Elf" =>   -5, "Sylvankind" =>   0, "Burghal Gnome" =>   0, "Forest Gnome" =>  -5, "Half-Krolvin" => -25, "Erithian" =>   0, "Aelotoi" =>   0}, 
            "the town of Kharam-Dzu"    => { "Human" =>    0, "Elf" => -15, "Dwarf" =>   5, "Giantman" =>   0, "Halfling" =>   0, "Half-Elf" =>  -5, "Dark Elf" =>  -25, "Sylvankind" => -15, "Burghal Gnome" =>  -5, "Forest Gnome" => nil, "Half-Krolvin" =>  -5, "Erithian" => nil, "Aelotoi" =>  -5}, 
            "Zhindel's Post"            => { "Human" =>  nil, "Elf" =>   0, "Dwarf" =>   5, "Giantman" => nil, "Halfling" => nil, "Half-Elf" => nil, "Dark Elf" =>  -15, "Sylvankind" => -15, "Burghal Gnome" =>   0, "Forest Gnome" => nil, "Half-Krolvin" =>   0, "Erithian" => nil, "Aelotoi" => nil}, 
            "Zul Logoth"                => { "Human" =>    0, "Elf" => -15, "Dwarf" =>   5, "Giantman" =>   0, "Halfling" =>   0, "Half-Elf" =>   0, "Dark Elf" =>  -15, "Sylvankind" => -15, "Burghal Gnome" =>  -5, "Forest Gnome" =>   0, "Half-Krolvin" =>  -5, "Erithian" =>   0, "Aelotoi" =>  -5}, 
        }

        racial_adjustment = town_trading_modifier[town][Stats.race].to_i

        # Doesn't account for town adjustments
        trading_adjustment = 1.to_i - (((Skills.to_bonus(Skills.trading) + Stats.inf[1])/12) + racial_adjustment).to_f / 100
        Cantrips::Locations.go2('gemshop')
        gems_with_values = Hash.new()
        Cantrips::Containers.open(container.id)
        gems = Cantrips::Containers.find_loot_by_pattern(Cantrips::Patterns.gems, container.id)

        gems.each{ |gem|
            fput "get ##{gem.id}"
            line = fput "appraise ##{gem.id}"
            line = waitfor("I'll give you", "what")
            line =~ /I'll give you (\d+) for it/
            gems_with_values[gem] = ($1.to_i * trading_adjustment).to_i if (! $1.nil?)
            fput "put ##{gem.id} in ##{container.id}"
        }
        Cantrips::Containers.close(container.id)
        return gems_with_values
    end

    def self.get_next_deed_cost(deeds=get_current_deeds())
        multiplier = (Char.level + deeds + 1) + 1
        # The 'accepted' forumla fails as deeds increase regardless
        # of level.  Unclear if it scales differently with current
        # deeds versus current level, but I'm clearly seeing less
        # accuracy as level increases even at a lower number of
        # total deeds.
        return (100 * multiplier)
    end

    def self.select_gems(gemlist, needed, cheapest_first=true)
        gems_to_drop_list = []
        gems_to_drop_value = 0

        if ( cheapest_first )
            # Prefer to drop our cheapest gems first to minimize junk
            # being carried.

            # Way inefficient. Fix that by only sorting the hash once.
            gemlist.sort_by {|id,value| value.to_i}.each{|gem,value|
                gems_to_drop_list.push(gem)
                gems_to_drop_value += value.to_i

                if ( gems_to_drop_value >= needed )
                    break
                end
            }
        else
            # Illi has small censers!
            gemlist.sort_by {|id,value| value.to_i}.reverse.each{|gem,value|
                # Don't want to drop too much value... we could sell those
                # things after all!
                if ( (gems_to_drop_value + value.to_i) < (needed * 1.2) )
                    gems_to_drop_value += value.to_i
                    gems_to_drop_list.push(gem)
                end

                if ( gems_to_drop_value >= needed )
                    break
                end
            }
        end

        return gems_to_drop_list, gems_to_drop_value

    end

    def self.use_brazier(gemlist)
        fput "close curt"
        fput "kneel"
        gemlist.each{|gem|
            fput "get ##{gem.id}"
            fput "put ##{gem.id} in brazier"
        }
        fput "pray"
        # Not all messages may apply to all rooms were the braziers are used.
        result = dothistimeout "light brazier",
            3,
            /(well-being|feel more secure|some deity was pleased|offering was accepted|dismay)/
        fput "stand"
        fput "open curtain"
    end

    # Main routine intentionally sorted to the bottom
    def self.run(parameters)
        options = Parser.parse(parameters)

        deeds = get_current_deeds

        if deeds < options.maxdeeds
            startRoom = Room.current.id
            cheapDeeds = [
                14081,   # Northern Caravansay
                745,     # Ta'Illstim
                4045,    # Wehminer's Landing
            ]
            allDeeds = cheapDeeds + [
                10854,   # River's Rest
                14176,   # Solhaven
                5587,    # Vornavis Caravansay
                9507,    # Zul Logoth
            ]

            # 10375  # Ta'Vaalor

            if ( ! options.richierich )
                deedRoom = Cantrips::Locations.find_nearest(cheapDeeds);
            else
                deedRoom = Cantrips::Locations.find_nearest(allDeeds);
            end

            # Make sure we can generally get there from here
            path = Room.current.path_to(deedRoom)
            if path.nil?
                echo "ERROR: No way to get to the deed rooms from where you are!"
                exit
            end

            silvers = Cantrips::Locations.cost_to(path)

            if path.length > 100 && !options.noprompt
                echo "Nearest deed room [#{deedRoom}] is #{path.length} away.  Are you sure? ';u deeds4gems' to continue. ';k deeds4gems' to cancel"
                pause_script
            elsif silvers > 0 && !options.noprompt
                echo "Nearest deed room will cost #{silvers} to reach.  Are you sure? ';u deeds4gems' to continue. ';k deeds4gems' to cancel"
                pause_script
            end

            # What's our stuff worth?
            gems = get_gem_values(options.gemsack)

            fput "open ##{options.gemsack.id}"

            while ( deeds < options.maxdeeds )
                cost = get_next_deed_cost(deeds)

                if ( cheapDeeds.include?(deedRoom) )
                    cost /= 3
                end

                (gems_to_drop_list, gems_to_drop_value) = select_gems(gems, cost, false)#(deedRoom != 745 && !options.bigspender))

                gems_to_drop_list.each{|gem| gems.delete(gem) }

                if (gems_to_drop_value.to_i >= cost)
                    Cantrips::Message.bold("Dropping #{gems_to_drop_value} silvers worth of gems.")                    
                    Cantrips::Locations.go2(deedRoom.to_s)

                    if Room.current.id == 4045
                        # Wehminer's Landing
                        fput "ring chime with mallet"
                        fput "ring chime with mallet"
                        fput "kneel"
                        gems_to_drop_list.each{|gem|
                            fput "get ##{gem.id}"
                            fput "drop ##{gem.id}"
                        }
                        fput "ring chime with mallet"
                        fput "out"

                    elsif Room.current.id == 745
                        # Ta'Illstim
                        fput "open tome"
                        result = dothis "turn tome to illistim", /image of|illustration of|pale man|already open/

                        if result =~ /already open/
                            result = dothis "look tome", /image of|illustration of|pale man/
                        end

                        fput "east"
                        fput "go panel"
                        fput "get taper"
                        fput "light my taper with candle"
                        fput "go panel"
                        fput "west"

                        if result =~/the image of a mature woman in gossamer robes of light grey/
                            fput "north"
                            fput "go modwir door"

                        elsif result =~/young man with summer-sun gold hair, blue eyes and a slight build/
                            fput "southeast"
                            fput "go maoral door"

                        elsif result =~/pale man dressed in drab colors/
                            fput "southwest"
                            fput "go thanot door"

                        end

                        fput "kneel"
                        gems_to_drop_list.each{|gem|
                            fput "get ##{gem.id}"
                            fput "drop ##{gem.id} on censer"
                        }
                        fput "meditate"
                        fput "pray"
                        waitfor("You slowly rise to your feet and quietly leave.");
                        Cantrips::Locations.go2(deedRoom.to_s)

                    elsif Room.current.id == 10854
                        # River's Rest
                        fput "kneel"
                        fput "look in pool"
                        fput "look in pool"
                        fput "touch pool"
                        gems_to_drop_list.each{|gem|
                            fput "get ##{gem.id}"
                            fput "drop ##{gem.id} in pool"
                        }

                        result = dothistimeout "touch pool",
                            3,
                            /(welcome to my garden|you must place a value on life)/

                        if result =~ /welcome to my garden/
                            fput "touch flower"
                            fput "get seed"
                            fput "plant seed"
                        end

                    elsif Room.current.id == 9507
                        # Zul Logoth
                        case Stats.prof
                            when "Bard"
                                color = "yellow"
                            when "Cleric"
                                color = "orange"
                            when "Empath"
                                color = "purple"
                            when "Paladin"
                                color = "grey"
                            when "Ranger"
                                color = "green"
                            when "Rogue"
                                color = "black"
                            when "Sorcerer"
                                color = "blue"
                            when "Warrior"
                                color = "brown"
                            when "Wizard"
                                color = "red"
                            else
                                Cantrips::Locations.go2(startRoom.to_s)
                                echo "Sorry, buddy, I can't help you!"
                                exit
                        end

                        case Stats.race
                            when "Aelotoi"
                                style = "winged"
                            when "Burghal Gnome"
                                style = "petite"
                            when "Dark Elf"
                                style = "thin"
                            when "Dwarf"
                                style = "short"
                            when "Elf"
                                style = "medium"
                            when "Erithian"
                                style = "delicate"
                            when "Forest Gnome"
                                style = "small"
                            when "Giantman"
                                style = "stocky"
                            when "Half-Elf"
                                style = "slender"
                            when "Half-Krolvin"
                                style = "sturdy"
                            when "Halfling"
                                style = "round"
                            when "Human"
                                style = "tall"
                            when "Sylvankind"
                                style = "slim"
                            else
                                Cantrips::Locations.go2(startRoom.to_s)
                                echo "Sorry, buddy, I can't help your kind!"
                                exit
                        end

                        fput "say ygrutha sans'ra"
                        fput "kneel"
                        fput "get stick from cup"
                        fput "light my stick"
                        fput "light #{color} candle with my stick"
                        fput "light my stick"
                        fput "light #{style} candle with my stick"
                        gems_to_drop_list.each{|gem|
                            fput "get ##{gem.id}"
                            fput "put ##{gem.id} in bowl"
                        }

                        fput "light my stick"
                        fput "pray"
                        result = dothistimeout "light candle in holder with my stick",
                                      3,
                                      /(smiling|scowling)/
                        fput "put stick in cup"
                        fput "stand"
                        fput "go door"
                        fput "out" # Unclear why ;go2 doesn't work leaving 9507

                    elsif Room.current.id == 14176 # Solhaven <-- Fix room id to collapse with below
                        fput "go curt"
                        use_brazier(gems_to_drop_list)
                        fput "go curt"

                    elsif Room.current.id == 14081 || # Northern Caravansay
                          Room.current.id ==  5587    # Vornavis Caravansay
                        use_brazier(gems_to_drop_list)
                    end

                    deeds = get_current_deeds
                else
                    Cantrips::Message.bold("Your gems aren't worth squat! Value: #{gems_to_drop_value}. Need: #{cost}.")
                    exit
                end
            end

            fput "close ##{options.gemsack.id}"
            Cantrips::Locations.go2(startRoom.to_s)
        end

        echo "You now have #{deeds} of #{options.maxdeeds} deeds"
    end
end

args = script.vars.length < 2 ? script.vars : script.vars[1..-1]
Deeds4Gems.run(args)
