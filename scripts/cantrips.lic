=begin

    cantrips - Jymamon's general purpose routine library.  This is mostly a dumping
               ground for routines I find myself needing more than once.

    author: Jymamon (gs4-jymamon@hotmail.com)
    version: 2017.12.31.01

    history:
    - 2017.12.31.01 Extend Room to add .includes?(character_name)
=end
=begin
    Older history
    - 2017.12.10.01 Location.reachable? added
    - 2017.12.09.01 Ebon Gate gems. Pattern tweaks. Formatting.
    - 2017.05.04.01 If calling find with an object, just return the object
    - 2017.01.27.01 add Locations.getsilvers
    - 2016.10.18.01 - deprecated -
    - 2016.04.04.01 Items.find includes room object (GameObj.loot)
    - 2016.10.18.01 CharSettings extensions
    - 2015.05.28.01 AsyncScripts & Helper classes
    - 2015.05.27.01 Still more gems. Teras & FWI
    - 2015.05.18.01 Still more gems
    - 2015.05.18.01 Teras gems
    - 2015.05.16.01 Even more FWI gem patterns and improve pattern to not match jewelry with gem
                    strings in the descriptions.
    - 2015.04.23.01 Even more FWI gem patterns
    - 2015.04.19.01 Even more FWI gem patterns
    - 2015.04.15.01 More FWI gem patterns
    - 2015.04.06.01 Fixes
    - 2015.04.02.01 Foraging
    - 2015.03.31.01 Minor cleanup
    - 2015.03.30.01 Items.get_from_container
    - 2015.03.29.01 Update for Lich 4.6.22
    - 2012.02.19.01 Initial version
=end

#
# Jymamon's general purpose support routine library.
#
$cantrips_version = "2017.12.31.01"
$CantripsVer = $cantrips_version # For backward compatibility

class Array
    def except(value)
        if value.class == Array
            return self.reject{|i| value.include?(i)}
        else
            return self - [value]
        end
    end
end

class Map
    def includes?(charname)
        found = GameObj.pcs.find{|pc| pc.name.downcase == charname.downcase}
        return !found.nil?
    end

    def distance_to(roomid)
        path = path_to(roomid)
        return path.nil? ? 99999 : path.length
    end
end

class Cantrips
    def Cantrips.version
        return $CantripsVer
    end

    # -----------------------------------------------------------------------------------------------------------
    # Simple container for starting/stopping a set of scripts that should be run asynchronously
    # -----------------------------------------------------------------------------------------------------------
    class AsyncScripts
        include DRbUndumped
        attr_accessor  :scripts

        def initialize
            @scripts = Array.new

            before_dying {
                @scripts.each { |s|
                    Message.bold "Cleaning up scripts: #{s}." if ( $debug )
                    stop_script(s) if running?(s)
                }
            }
        end

        # Loads our scripts commands
        def loadScripts(script_list)
            self.stop()
            if ( script_list.class == String )
                @scripts = script_list.split(/\s*,\s*/)
            elsif ( script_list.class == Array )
                @scripts = script_list
            end
        end

        # Start all of our scripts, possibly loading a new set if necessary
        def start(script_list=nil)
            Message.bold "Scripts: #{script_list}" if ( $debug )
            if ( ! script_list.nil? )
                loadScripts(script_list)
            end

            @scripts.each{|s|
                vars = s.split(/\s+/)

                if Script.running.find { |s| s.vars[0].downcase == vars[0].downcase }.paused or running? vars[0]
                    stop_script vars[0]
                    wait_while { running? vars[0] }
                end

                if ( vars.size > 1 )
                    start_script( vars[0], vars[1..-1] )
                else
                    start_script( vars[0] )
                end
            }
        end

        # Stop all of the running hunting scripts.
        def stop
            @scripts.each{|s|
                vars = s.split(/\s+/)
                if Script.running.find { |s| s.vars[0].downcase == vars[0].downcase }.paused or running? vars[0]
                    stop_script vars[0]
                    wait_while { running? vars[0] }
                end
            }
            Message.bold "Stopped all scripts" if ( $debug )
            @scripts.clear
        end
    end

    class Containers
        # Common close routine so only 1 location needs updated for the varying scripted open messages.
        def self.close(id)
            waitrt?
            result = dothistimeout("close ##{id}",
                                   3,
                                   /you flip open|
                                    ^That\sis\salready\sclosed\.$|
                                    ^You\sclose|
                                    ^You\sadjust|
                                    ^Pulling\son\sthe\sdrawstrings\stightly|
                                    ^There\sdoesn't\sseem\sto\sbe\sany\sway\sto\sdo\sthat\.$/x);

            waitrt?
            return;
        end

        # Get a list of the values of a set of gems
        def self.find_loot_by_pattern(pattern, lootsack=nil)
            items = Array.new

            if ( lootsack.nil? )
                unless lootsack = ( Cantrips::Items.find(UserVars.lootsack) )
                    echo 'error: failed to find your lootsack'
                    exit
                end
            elsif ( lootsack.class==String )
                unless lootsack = ( Cantrips::Items.find(lootsack) )
                    echo 'error: failed to find your lootsack'
                    exit
                end
            end

            lootsack.contents.each { |obj|
                if ( obj.noun =~ /#{pattern}/ || obj.name =~ /#{pattern}/ )
                    items.push(obj)
                end
            }

            return(items.flatten.compact)
        end

        # Find items by their type according to GameObj
        def self.find_loot_by_type(type, lootsack=nil)
            items = Array.new

            if ( lootsack.nil? )
                unless lootsack = ( Cantrips::Items.find(UserVars.lootsack) )
                    echo 'error: failed to find your lootsack'
                    exit
                end
            elsif ( lootsack.class==String )
                unless lootsack = ( Cantrips::Items.find(lootsack) )
                    echo 'error: failed to find your lootsack'
                    exit
                end
            end

            lootsack.contents.each { |obj|
                if ( obj.type =~ /#{type}/ )
                    items.push(obj)
                end
            }

            return(items.flatten.compact)
        end

        # Common open routine so only 1 location needs updated for the varying scripted open messages.
        def self.open(id)
            waitrt?
            result = dothistimeout("open ##{id}",
                                   3,
                                   /^That\sis\salready\sopen\.$|
                                    ^You\s(adjust|open)\sthe\sfolds\sof\syour|
                                    ^You\sopen|
                                    ^There\sdoesn't\sseem\sto\sbe\sany\sway\sto\sdo\sthat\.$|
                                    ^But it's already open\.$/x);
            waitrt?
            return;
        end
    end

    class Items
        def self.find(noun)
            if noun.nil?
                echo "Can't find a nil item!"
                return nil
            end

            if ( noun.class == GameObj )
                return noun
            end

            unless item = (
                GameObj.inv.find { |obj| obj.id   =~ /\b#{Regexp.escape(noun.strip)}$/i } ||
                GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(noun.strip)}$/i } ||
                GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(noun).sub(' ', ' .*')}$/i } ||
                GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(noun).sub(' ', ' .*')}/i } ||
                GameObj.loot.find { |obj| obj.id   =~ /\b#{Regexp.escape(noun.strip)}$/i } ||
                GameObj.loot.find { |obj| obj.name =~ /\b#{Regexp.escape(noun.strip)}$/i } ||
                GameObj.loot.find { |obj| obj.name =~ /\b#{Regexp.escape(noun).sub(' ', ' .*')}$/i } ||
                GameObj.loot.find { |obj| obj.name =~ /\b#{Regexp.escape(noun).sub(' ', ' .*')}/i } )
                echo "error: failed to find item '#{noun}'"
                exit
            end

            return item
        end

        def self.get_from_container(object, container, leave_open=false, try_open=true)
            # TODO: Update this to only close the container if it was
            # closed when we started.
            if ( try_open )
                Cantrips::Containers.open(container.id)
            end

            fput "get ##{object.id} from ##{container.id}"

            if ( ! leave_open )
                Cantrips::Containers.close(container.id)
            end
        end

        def self.put_in_container(object, container, leave_open=false, try_open=false)
            # TODO: Update this to only close the container if it was
            # closed when we started.
            if ( try_open )
                Cantrips::Containers.open(container.id)
            end

            fput "put ##{object.id} in ##{container.id}"

            if ( ! leave_open )
                Cantrips::Containers.close(container.id)
            end
        end
    end

    class Locations
        # Find the cost to travel a route. Stolen from go2;
        def self.cost_to(path)
            cost = 0
            path.each_index { |index|
                Room[path[index]].tags.each { |tag|
                    if tag =~ /^silver-cost:#{path[index+1]}:(.*)$/
                        cost_string = $1
                        if cost_string =~ /^[0-9]+$/
                            cost += cost_string.to_i
                        else
                            cost += StringProc.new(cost_string).call.to_i
                        end
                    end
                }
            }
            cost
        end

        # Find the nearest room from a list of rooms
        def self.find_nearest(target_list)
            start_room   = Room.current
            previous, shortest_distances = Map.dijkstra(Room.current.id.to_i)
            target_list = target_list.reject{|t| shortest_distances[t].nil?}.sort{|a,b| shortest_distances[a]<=>shortest_distances[b]};
            return target_list[0]
        end

        # Forage a number of ingredients. Returns the number of foragable items actually found
        def self.forage(ingredient, number, container)
            if ( Stats.prof == "Bard" )
                result = dothistimeout("renew 1011",
                                       2,
                                       /Renewing|not singing/);

                if (result =~ /not singing/)
                    Spell[1011].cast
                    waitcastrt?
                end

            elsif ( Spell[213].known? && Spell[213].affordable? )
                Spell[213].cast
                waitcastrt?
            end

            fput "open ##{container.id}"

            empty_hands

            fput "kneel"

            got = 0

            1.upto(number) {

                while ( GameObj.right_hand.name == "Empty")
                    Magic::make_active([506,603,9704])

                    result = dothis "forage for #{ingredient}",
                        /you\sare\sunable\sto\sfind\sanything\suseful\.|
                         ^You\sbegin\sto\sforage\saround\swhen\syour\shand|
                         ^You\sstumble\sabout\sin\sa\sfruitless|
                         ^You\sfumble\sabout\sso\sbadly|
                         ^You\sforage\saround\sbut\sfind\snothing\sof\sinterest\.|
                         ^You\sforage\sbriefly\sand\smanage\sto\sfind|
                         ^As\syou\scarefully\sforage\saround\syou|
                         ^As\syou\sforage\saround\syou\ssuddenly\sfeel\sa\ssharp\spain\sin\syour\sright\shand!|
                         ^As\syou\sforage\saround\syou\ssuddenly\sfeel\sa\ssharp\spain\sin\syour\sleft\shand!|
                         ^You\sbegin\sto\sforage\saround\swhen\ssuddenly\syou\sfeel\sa\sburning\ssensation\sin\syour\shand\.|
                         ^You\smake\sso\smuch\snoise\sthat\sonly\sthe\sdead\swould\snot\snotice\syou\sthrashing
                          \sabout\sin\syour\sunsuccessful\ssearch\.|
                         you\srealize\syou\sshould\sprobably\sleave
                        /x

                    if result =~ /As you carefully forage around you|you are unable to find anything useful\.|you should probably leave some things/
                        error = true
                        break
                    end

                    pause 0.25
                    waitrt?
                end

                if error
                    break
                end

                fput "put ##{GameObj.right_hand.id} in ##{container.id}"
                got += 1
                pause 0.25
            }

            fill_hands

            fput "stand"

            fput "close ##{container.id}"

            return(got)
        end

        # Goto a specific room
        def self.go2(room, parameters=nil)
            script_parameters = ["_disable_confirm_"]

            if (!parameters.nil?)
                if parameters.class==String
                    script_parameters.push(parameters)
                elsif parameters.class==Array
                    script_parameters.concat(parameters)
                else
                    Message.bold "Ignoring parameters I don't know how to handle: #{parameters}!"
                end
            end

            if ( Room.current.id != room )
                script_parameters.push(room)
                start_script "go2", script_parameters
                wait_while{running? "go2"}
            end
        end

        def self.getsilvers(amount)
            self.go_dothis_and_return("bank", Proc.new { fput "withdraw #{amount}"; });
        end

        def self.go_dothis_and_return(room, action)
            returnto = Room.current.id
            self.go2(room);
            action.call();
            self.go2(returnto);
        end

        def self.reachable?(roomid)
            if Room.current.id == roomid
                return true
            end

            previous, shortest_distances = Map.dijkstra(Room.current.id, roomid)
            return previous[roomid]
        end

    end

    class Magic
        # Make a list of spells active
        def self.make_active(spell_list)
            spell_list.each{|s|
                Spell[s].cast if Spell[s].known? and Spell[s].affordable? and not Spell[s].active?
                waitcastrt?
            }
        end
    end

    class Message
        # Output a bolded message. Stolen from a script by Casis.
        def self.bold(text, mono=false)
            stringArray  = Array.new
            stringArray  = (text.gsub(/[\n]+/, "o=\_=zz")).split(/o=\_=zz/)
            begin_text   = "<pushBold\/>"
            end_text     = "<popBold\/>"

            if $fake_stormfront
                begin_text = "\034GSL\r\n "
                end_text   = "\034GSM\r\n "
            end

            stringArray.each { |line|
                if (mono)
                    self.mono "#{begin_text}#{line.gsub('\n','')}#{end_text}"
                else
                    puts "#{begin_text}#{line.gsub('\n','')}#{end_text}"
                end
            }
        end

        # Force a message to be monospaced in Stormfront. Just outputs the message
        # in Wizard since that's a monospaced interface already. Also stolen from
        # a script by Casis.
        def self.mono(text, bold=false)
            stringArray  = Array.new
            stringArray  = (text.gsub(/[\n]+/, "o=\_=zz")).split(/o=\_=zz/)
            begin_text   = "<output class=\"mono\"\/>"
            end_text     = "<output class=\"\"\/>"

            if $fake_stormfront
                begin_text = ""
                end_text   = ""
            end

            stringArray.each { |line|
                if ( bold )
                    self.bold "#{begin_text}#{line.gsub('\n','')}#{end_text}"
                else
                    puts "#{begin_text}#{line.gsub('\n','')}#{end_text}"
                end
            }
        end

        # Silent "put".  Doesn't echo to the console.
        def self.sput(string)
            $_SERVER_.puts(string)
        end
    end

    class Patterns
        # I find I do a lot with gems - deeds, loresing, bounties - this just defines
        # a regexp of all gem nouns for other scrips to use. For gems, GameObj types don't
        # always seem to work for some reason.
        def self.gems
            gem_patterns = [
                        "((?:banded|lace blue|chameleon|cloud|fire|frost|moss|mottled|tigereye) agate)",
                        "((teardrop of green|some polished dark blue|piece of golden|droplet of honey) amber)",
                        "(deep purple|shadow) amethyst",
                        "(azurite)",
                        "((?:azure|crimson|golden|emerald) blazestar)",
                        "(blood(?:jewel|stone))",
                        "(dark red-green bloodstone)",
                        "(bright bluerock)",
                        "(deep red carbuncle)",
                        "piece of white chalcedony",
                        "marbled green chrysoprase",
                        "radiant green cinderstone",
                        "((?:some polished |piece of )(?:black|blue|pink|red|flower|cat's-paw) coral)", # Blue ridge and cat's (paw|eye) coral doesn't seem to go in jars?!
                        "(blue cordierite)",
                        "(corestone)",
                        "age-darkened ivory crescent",
                        "((?:cinnabar|glaesine|quartz|rock|dragonmist|tigerfang|tangerine wulfenite) crystal)",
                        "(deathstone)$",
                        "(scarlet despanal)",
                        "((?:blue|dragon\'s-tear|dwarf-cut|black|purple stormcloud|yellow|uncut(?: (star-of-Tamzyrr|maernstrike))?) diamond)",
                        "(star diopside)",
                        "((?:hazy (red)|smooth (green)|round amber|mist blue) sea glass (disk))",
                        "(doomstone)",
                        "((?:black|blue|green|pink|red|yellow|white) dreamstone)",
                        "(gold dust)",
                        "((?:dragonfire|dragon\'s-tear|dwarf-cut|uncut|eye-of-Koar|star) emerald)",
                        "(blue eostone)",
                        "(olivine faenor-bloom)",
                        "((?:bronze|copper|gold|iron|mithril|platinum|silver|steel|urglaes) fang)",
                        "(chalky cube of feldspar)",
                        "((?:violet|periwinkle) feystone)",
                        "(firestone)",
                        "((?:almandine|blood red|green|orange spessartine|wyrm\'s eye|dark purple sunset|lustrous black) garnet)",
                        "((?:blood red|green|spessartine|wyrm\'s eye) garnet)",
                        "((?:bright |green |golden )?(?:ametrine|aquamarine|chrysoberyl|blue|red|beryl|chrysoprase|flawless aquamarine|ethereal blue) gem)",
                        "(small (?:green|purple|red) geode)",
                        "((?:brilliant )?(?:lilac|cerulean|clear|golden|green|peach|smoky|ultramarine) glimaerstone)",
                        "oblong blue goldstone",
                        "((?:rosette of crystalline )gypsum)",
                        "(petrified haon)",
                        "(pale yellow heliodor)",
                        "(sphere of scratched|mirrored orb of) hematite",
                        "(yellow hyacinth)",
                        "(polished ivory)",
                        "(fiery jacinth)",
                        "((?:brown|green|white|yellow) jade)",
                        "((?:black|red|yellow|(?:ovoid|cone|nodule|piece) of(?: (black|red|yellow|peacock|leopard|lunar|monsoon|ember))?) jasper)",
                        "(piece of (?:black|green|pink|white) marble)",
                        "(piece of petrified (maoral|modwir))",
                        "((?:shimmering nodule of )(marcasite))",
                        "((?:glossy (?:sable|pale beige)) mekret)",
                        "(mica)",
                        "(mithril-bloom)",
                        "((?:pale blue|cats-eye|golden|opaline|pale green|silvery|blue|grey|black) moonstone)",
                        "(mother-of-pearl)",
                        "(oblong piece of nephrite)",
                        "((?:gold|platinum|small copper) nugget)",
                        "((?:spiderweb )?obsidian)",
                        "((?:piece of banded|black) ?onyx)",
                        "((?:aster|black|boulder|dragonfire|fire|moonglae|white|frost|purple|blue green lagoon|purple black thunderhead|iridescent wood|blue sky) opal)",
                        "(green ora-bloom)",
                        "((?:firemote|shadowglass|black-cored emerald) orb)",
                        "((?:(?:tiny|small|medium|large) )?(?:black|fire|green|grey|iridescent|midnight blue|pink|white) pearl)",
                        "(peridot)",
                        "(pyrite)",
                        "((?:(piece|shard|irregular cluster) of |some )?(?:asterfire|blue|carnelian|citrine|leopard|milky|rose|rainbow|tangerine|smoky|cat's eye|dragonfire) quartz)",
                        "(golden rhimar-bloom)",
                        "(Alhan'aht rivertear)",
                        "cluster of (?:(orange|pink|red|yellow) roestone)",
                        "(rift(?:shard|stone))",
                        "(rosespar)",
                        "((?:dragon\'s-tear|dwarf-cut|star|uncut|sylvarraend|pale pink mistvein) ruby)",
                        "((?:star|uncut) ruby)",
                        "(sandsilver)",
                        "(?:silvery mint green moth|vibrant hummingbird|(?:bright orange|iridescent azure) butterfly|russet and cream moth|silver firefly)( saewehna)",
                        "((?:blue|green|pink|star|violet|yellow|white|(?:blue|lavender) shimmarglin|clear|dragonsbreath|mermaid's-tear|dragonseye|dwarf-cut|pale water|pale mistvein|pale oasis) sapphire)",
                        "umber sard",
                        "((shimmertine|cloudy alexandrite) shard)",
                        "((?:inky blue|scarlet|violet) (smoldereye))",
                        "(viridian soulstone)",
                        "((?:black|brown|white|yellow) sphene)",
                        "(spherine)",
                        "((?:blue|pink|red|violet) spinel)",
                        "(fossilized sponge)",
                        "((?:green|blue|red|white) starstone)",
                        "((?:banded sardonyx|alexandrite|green aventurine|green malachite|iridescent labradorite|light pink morganite|pink rhodochrosite|polished jet|turquoise|brilliant red firebird) stone)",
                        "(jet stone)",
                        "(sunstone)",
                        "(sapphire talon)",
                        "(petrified thanot)",
                        "(purple thunderstone)",
                        "((?:blue|clear|golden|green errisian|orange imperial|pink|smoky) topaz)",
                        "dark turquoise stone",
                        "faint gold tempest stone",
                        "slice of ribbon stone",
                        "silver-cored vortex stone",
                        "pale grey tempest stone",
                        "dark blue tempest stone",
                        "uncut sunstone",
                        "Phoen's eye topaz",
                        "piece of striated fluorite",
                        "teardrop of dark green heliotrope",
                        "faceted blood red sandruby",
                        "fossilized bessho lizard spur",
                        "variegated violet tanzanite",
                        "sliver of bright green viridine",
                        "((?:blue|golden|errisian|imperial|pink|smoky) topaz)",
                        "((?:black|blue|clear|green|pink) tourmaline)",
                        "(spiderweb turquoise)",
                        "(argent vultite-bloom)",
                        "((?:twisted (nacreous) blue) waterweb)",
                        "((?:crystal of (?:silvery|shadowy) )wraithaline)",
                        "(wyrdshard)",
                        "((?:brown|clear|green|snowflake|yellow) zircon)",
                        "((?:green|yellow) zircon)",
                        "some (blue lapis) lazuli",
                        "(?:Kezmonian )(honey beryl)",
                        "hexagonal cobalt blue beryl",
                        "(sardonyx)",
                        "white-point star diamond",
                        "ice blue diamond",
                        "nebulous emerald",
                        "haloed Reim ruby",
                        "large yellow diamond",
                        "pale gold firefly saewehna",
                        "deep blue mermaid's-tear sapphire",
                        "green alexandrite stone",
                        "piece of leopard skin jasper",
                        "spar of dull hematite",
                        "blackish blue idocrase",
                        "spear of lavender-grey iolite",
                        "shard of pink petalite",
                        "square of shale rock",
                        "shard of pale grey shadowglass",
                        "swirled lightning glass shard",
                        "rough-edged matte white soulstone",
                        "fractured ebon-tinged soulstone",
                        "twisted iron spiral",
                        "round of milky amber",
                        "chunk of sand-smoothed chalcedony",
                        "uncut dark crimson diamond",
                        "piece of black jade",
                        "pebble of orbicular jasper",
                        "cluster of fire opal",
                        "smooth blue-green fire opal",
                        "purple plum-shaped pearl",
                        "snow quartz",
                        "faceted deep blood red ruby",
                        "impure blood red ruby",
                        "pallid sapphire",
                        "deep umber paw-shaped stone",
                        "blue-green chrysocolla stone",
                        "cluster of sky blue crystal",
                        "piece of jet-flecked ivory",
                        "smoky amethyst",
                        "piece of blue jade",
                        "ebon-cored vortex stone",
                        "chunk of snowy white ice stone",
                        "chunk of pale blue ice stone",
                        "luminous prehnite",
                        "heart of blue onyx",
                        "cloud opal",
                        "jelly opal",
                        "chunk of pearly grey ice stone",
                        "shifting multihued auboraline",
                        "dull grey crystal",
                        "bright violet feystone",
                        "frosty pale violet pearl",
                        "absinthe green pearl",
                        "jewel-toned dragonfly saewehna",
                        "flame-banded gold chameleon agate",
                        "gently sloped green moss agate",
                        "thin shard of iridescent fire agate",
                        "round of gnat-filled amber",
                        "slice of gold-blended ametrine",
                        "fragment of lilac-toned amethyst",
                        "brilliant teal-laced azurite",
                        "scintillating scarlet red blazestar",
                        "inky-cored vivid carmine bloodjewel",
                        "cluster of gingery golden chrysoberyl",
                        "clouded maize-colored citrine",
                        "sharply cut salorisa pink diamond",
                        "pale metallic silver mistvein diamond",
                        "flawless argent-white diamond",
                        "purple stormcloud diamond",
                        "pale-edged powder blue dreamstone",
                        "smooth black umber-suffused dreamstone",
                        "black-rayed celadon star emerald",
                        "heart-shaped aqua green emerald",
                        "multi-faceted sky blue feystone",
                        "six-pointed rich sanguine garnet",
                        "beryl green crystal-filled geode",
                        "pristine smoky violet glimaerstone",
                        "rosette of crystalline gypsum",
                        "teardrop of mauve petrified haon",
                        "dainty orb of primrose yellow heliodor",
                        "cushion-cut ember orange hyacinth",
                        "bronze-tinged lambent yellow jacinth",
                        "slim bar of woodland green jade",
                        "pyrite-capped vibrant blue lapis lazuli",
                        "small disk of velvety green malachite",
                        "cyan-haloed creamy ivory moonstone",
                        "silver-washed celestial blue moonstone",
                        "purple black thunderhead opal",
                        "pearlescent raven black opal",
                        "some pellucid blue-green ora-bloom",
                        "frosty pale violet pearl",
                        "glimmering magnolia white pearl",
                        "oversized shadowy purple pearl",
                        "trilliant-cut yellow-green peridot",
                        "tiny prism of wintry blue peridot",
                        "triangular pastel rainbow quartz",
                        "hazy shard of faint pink rose quartz",
                        "cube of sheer blossom pink rosespar",
                        "wheel-incised incarnadine ruby",
                        "coin-sized seafoam white sandsilver",
                        "pale mistvein sapphire",
                        "silver-swept blue mistvein sapphire",
                        "honey-tinted indigo water sapphire",
                        "dark-veined apple green turquoise",
                        "crystal of shadowy wraithaline",
                        "silver firefly saewehna",
                        "dark grey dreamstone fragment",
                        "chunk of bronzite",
                        "shifting multihued auboraline",
                        "dull grey crystal",
                        "some golden rhimar-bloom",
                        "unfaceted mistvein diamond",
                        "slice of pale bone white agate",
                        "stellular dragon's-tear diamond",
                        "radiant lush viridian star emerald",
                        "ebon-cored ruddy almandine garnet",
                        "teardrop of murky sanguine ruby",
                        "blackened feystone core",
                        "cabochon of milky azure aquamarine",
                        "thin blade of verdant sea glass",
                        "round disk of green sea glass",
                        "misty silver crystalline spiral",
                        "grooved burnt orange sea star",
                        "prismatic rose-gold fire agate",
                        "wedge of ocher and ebony ambergris",
                        "spiny fan of lustrous black coral",
                        "limpid dark indigo tidal pearl",
                        "rich cerulean mermaid's-tear sapphire",
                        "honey-washed violet water sapphire",
                    ]
            return("^(?:#{gem_patterns.join('|')})$")
        end

        def self.allgems
            return("(#{Cantrips::Patterns.gems})")
        end
    end

    # Tracks a set of start/stop times for reporting. The standard Benchmark
    # is another option, but this fits my needs better.
    class Stopwatch
        attr_accessor :created,
                      :timelist,
                      :started
        def initialize
            @created  = Time.now.to_i
            @timelist = Array.new
            @started  = 0
        end

        # Convert seconds to a more readable output string
        def self.hms(seconds=0)
            t = seconds
            s = 0
            m = 0
            h = 0

            if t < 60
                s = t
                timestring = sprintf("%d seconds", s)

            else
                s = t % 60
                t = (t - s) / 60

                if t < 60
                    m = t
                    timestring = sprintf(
                       "%d minute%s %d second%s",
                        m.to_i,
                        m.to_i==1 ? "" : "s",
                        s.to_i,
                        s.to_i==1 ? "" : "s")

                else
                    m = t % 60
                    t = (t - m) / 60

                    if t < 24
                        h = t
                        timestring = sprintf("%d hour%s %d minute%s %d second%s",
                            h.to_i,
                            h.to_i==1 ? "" : "s",
                            m.to_i,
                            m.to_i==1 ? "" : "s",
                            s.to_i,
                            s.to_i==1 ? "" : "s")
                    else
                        h = t % 24
                        t = (t - h) / 24

                        if t!=0
                            timestring = sprintf("%d day 0 hour%s %d minute%s %d second%s",
                                t.to_i,
                                t.to_i==1 ? "" : "s",
                                h.to_i,
                                h.to_i==1 ? "" : "s",
                                m.to_i,
                                m.to_i==1 ? "" : "s",
                                s.to_i,
                                s.to_i==1 ? "" : "s")
                        end
                    end
                end
            end

            return(timestring)
        end

        # Report average of all recorded times
        def average
            if ( @timelist.size > 0 )
                average = 0

                0.upto(@timelist.size-1){|i|
                    average += @timelist[i]
                }

                average /= @timelist.size

                return("#{Stopwatch.hms(average)}")
            else
                return("0 seconds");
            end
        end

        # Reports the last running time
        def last
            if ( @timelist.size > 0 )
                return("#{Stopwatch.hms(@timelist[-1])}")
            else
                return("0 seconds")
            end
        end

        # Record a new start time
        def start
            @started = Time.now.to_i
        end

        # Stop the currently running watch.
        def stop
            if ( @started!=0 )
                @timelist.push( Time.now.to_i - @started )
            end
            @started = 0
        end

        # Reports time since created
        def total
            seconds = Time.now.to_i - @created
            return("#{Stopwatch.hms(Time.now.to_i - @created)}")
        end
    end
end
