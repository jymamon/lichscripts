=begin
    jgtk - Jymamon's GTK wrapper because GTK is annoying

    This is a reusable module for other scripts.  You don't need to
    run it directly in any fashion.

    author: Jymamon (gs4-jymamon@hotmail.com)
       game: Gemstone
       tags: utility
    version: 2017.01.13.01
       repo: https://github.com/jymamon/lichscripts

    history:
        2017.01.13.01 - Split GTK wrapper into JGTK
=end
=begin
    It should be noted that this isn't intended to expose all of
    GTK.  Use GTK directly if you need that.  This is an attempt to
    make simple windows simpler because I hate GUI work.
=end

module Jgtk
    if $development
        before_dying {
            echo "Cleaning up #{self}"

            begin
                self.constants.each{|c|
                    echo "-- Removing #{c}"
                    self.send(:remove_const, c)
                }

                metaclass = class << self; self end
                self.instance_methods.each{|method_name|
                    metaclass.class_eval{
                        echo "-- Removing #{method_name.to_sym}"
                        undef_method(method_name.to_sym)
                    }
                }

                echo "-- Removing #{self}"
                Object.send(:remove_const, "#{self}")
            rescue
            end
        }
    end

    class Widget ; end
    class Table < Widget ; end

    def Jgtk.version
        return "2017.01.13.01"
    end

    class BaseWindow
        attr_accessor :action
        attr_reader :height, :resizable, :title, :width, :window
        protected :window

        def initialize(title, width = 400, height = 300)
            # Windows can be resized by default with GTK
            @resizable = true
            @width     = width
            @height    = height
            @title     = title

            Gtk.queue {
                @window = Gtk::Window.new
                @window.title = "#{self.title}"
                @window.border_width = 3 # Arbitrarily chosen
            }

            self.resize(self.width, self.height)
        end

        def resizable=(can_resize)
            @resizable = can_resize

            Gtk.queue {
                self.window.resizable = self.resizable
            }
        end

        def resize(width, height)
            @height = height
            @width = width

            Gtk.queue {
                # http://stackoverflow.com/questions/3582558/setting-resizable-to-false-shrinks-window-to-point
                @window.set_size_request(@width, @height)
            }
        end

        def run
            begin
                Gtk.queue {
                    # Hook up closing the window
                    @window.signal_connect_after('delete_event') {
                        @action = :exit
                    }

                    @window.show
                    @window.keep_above = true
                }

                wait_while { @action.nil? }

            rescue
                respond "That was bad.\n#{$!.backtrace.join("\n\t")}"

            ensure
                Gtk.queue {
                    @window.destroy
                }
            end
        end

    end

    class Button < Widget
        attr_reader :action

        def initialize(text, action = nil)
            @text = text
            @action = action

            Gtk.queue {
                @widget = Gtk::Button.new(text)
            }

            if (!action.nil?)
               onclick(action);
            end
        end

        def onclick(action)
            @action = action

            Gtk.queue {
                @widget.signal_connect('clicked') {
                    begin
                       Gtk.queue {
                            @action.call(self, text);
                        }
                    rescue
                        echo "error in clicked() callback for #{self.class} with text #{self.text}"
                    end
                }
            }
        end

        def text=(newtext)
            @text = newtext

            Gtk.queue {
                @widget.label = @text
            }
        end

        def text
            return @text
        end
    end

    class CheckButton < Widget
        attr_reader :text

        def initialize(label=nil)
            @text = label

            Gtk.queue {
                @widget = Gtk::CheckButton.new(label)
                @widget.sensitive = false
            }
        end

        def checked?
            return @widget.active?
        end

        def checked=(bool)
            Gtk.queue {
                @widget.set_active(bool)
                @widget.show
            }
        end

        def enabled?
            value = nil

            Gtk.queue {
                value = @widget.sensitive?
            }

            return value
        end

        def enabled=(bool)
            Gtk.queue {
                @widget.sensitive = bool
            }
        end

    end

    # GridView is very much in progress
    class GridView < Widget
        attr_reader :model, :grid

        def values
            return @grid.model
        end

        def text
            if @grid.selection.nil?
                return nil
            else
                return @grid.selection.selected[0]
            end
        end

        def initialize()
            @frame = Gtk::Frame.new().set_shadow_type(Gtk::SHADOW_ETCHED_IN)
            # TODO: allow column definitions
            #@widget = Gtk::VBox.new(homogeneous=false, spacing=nil)
            @model = Gtk::ListStore.new(String, String)

            @grid = Gtk::TreeView.new(@model)
            @grid.selection.mode = Gtk::SELECTION_SINGLE
            @grid.set_headers_visible(false)

            # TODO: allow column naming
            column = Gtk::TreeViewColumn.new("1", Gtk::CellRendererText.new, :text => 0)
            @grid.append_column(column)
            column2 = Gtk::TreeViewColumn.new("2", Gtk::CellRendererText.new, :text => 1)
            @grid.append_column(column2)

            # Use ScrolledWindow to make the TreeView scrollable
            # Otherwise the TreeView would expand to show all items
            # Only allow vertical scrollbar
            @widget = Gtk::ScrolledWindow.new(nil, nil)
            @widget.set_policy( Gtk::POLICY_NEVER, Gtk::POLICY_AUTOMATIC )
            @widget.add(@grid)
            @widget.set_shadow_type(Gtk::SHADOW_IN)
        end

        # TODO: record is assumed to just be a string at the moment
        def add_option(creature, level)
            begin
                Gtk.queue {
                    iter = @model.append
                    iter[0] = creature
                    iter[1] = "Level: #{level==999 ? 'scaling' : level}"
                }
            rescue
                echo "error in add_option() callback for #{self.class}"
                echo "#{$!.backtrace.join("\n\t----- ")}"
            end
        end

        def clear()
            Gtk.queue {
                @model.clear
            }
        end

        def remove_option()
            begin
                Gtk.queue {
                    remove = nil

                    @model.each{|model,path,iter|
                        remove = iter if (iter[0]==self.text)
                    }

                    @model.remove(remove)
                }
            rescue
                echo "error in remove_option() for #{self.class}"
                echo "#{$!.backtrace.join("\n-- ")}"
            end
        end
    end

    class ListStore < Widget
        attr_reader :selected, :action

        def text
            return @widget.active_text
        end

        def initialize(text, options = nil)
            @selected = 0

            Gtk.queue {
                @widget = Gtk::ListStore.new(String)

                options.each{|o|
                    iter = @widget.append
                    iter[0] = o
                }
            }
        end

        def active=(value)
            Gtk.queue {
                self.set_active(value)
            }
        end

        def add_option(option, active = false)
            Gtk.queue {
                iter = @widget.append
                iter[0] = option

                if (active)
                    @widget.active_iter = iter;
                end
            }
        end

        def clear()
            Gtk.queue {
                @widget.clear
            }
        end

        def onchange(action)
            @action = action

            Gtk.queue {
                @widget.signal_connect("changed") {|c|
                    if c.active > -1
                        @selected = @widget.active.to_i

                        begin
                            @action.call(c.active_iter[0])
                        rescue
                            echo "error in onchange() callback for #{self.class}"
                            echo "#{$!.backtrace.join("\n\t")}"
                        end
                    end
                }
            }
        end

        # This is only working when option==0 and is weirdness
        # otherwise.  Need to investigate, but delete is not the
        # top concern at the moment.
        def remove_option(option=-1)
            begin
                if ( option==-1)
                    option = @widget.active
                end

                Gtk.queue {
                    @widget.remove_text(@widget.active)
                }

                if (option > 0)
                    option = option - 1
                end

                Gtk.queue {
                    self.set_active(option.to_i);
                }
            rescue
                echo "error in remove_option() for #{self.class}"
                echo "#{$!.backtrace.join("\n\t")}"
            end
        end

        def set_active(index)
            @selected = index

            Gtk.queue {
                @widget.set_active(index)
            }
        end
    end

    class ComboBox < Widget
        attr_reader :selected, :action

        def text
            return @widget.active_text
        end

        def initialize(text, options = nil)
            @selected = 0

            Gtk.queue {
                @model = Gtk::ListStore.new(String)
                @widget = Gtk::ComboBox.new(@model)

                renderer = Gtk::CellRendererText.new
                @widget.pack_start(renderer, true)
                @widget.set_attributes(renderer, :text => 0)

                options.each{|o|
                    iter = @model.append
                    iter[0] = o
                }
            }
        end

        def active=(value)
            Gtk.queue {
                self.set_active(value)
            }
        end

        def add_option(option, active = false)
            Gtk.queue {
                iter = @model.append
                iter[0] = option

                if (active)
                    @widget.active_iter = iter;
                end
            }
        end

        def clear()
            Gtk.queue {
                @model.clear
            }
        end

        def onchange(action)
            @action = action

            Gtk.queue {
                @widget.signal_connect("changed") {|c|
                    if c.active > -1
                        @selected = @widget.active.to_i

                        begin
                            @action.call(c.active_iter[0])
                        rescue
                            echo "error in onchange() callback for #{self.class}"
                            echo "#{$!.backtrace.join("\n\t")}"
                        end
                    end
                }
            }
        end

        # This is only working when option==0 and is weirdness
        # otherwise.  Need to investigate, but delete is not the
        # top concern at the moment.
        def remove_option(option=-1)
            begin
                if ( option==-1)
                    option = @widget.active
                end

                Gtk.queue {
                    @widget.remove_text(@widget.active)
                }

                if (option > 0)
                    option = option - 1
                end

                Gtk.queue {
                    self.set_active(option.to_i);
                }
            rescue
                echo "error in remove_option() for #{self.class}"
                echo "#{$!.backtrace.join("\n\t")}"
            end
        end

        def set_active(index)
            @selected = index

            Gtk.queue {
                @widget.set_active(index)
            }
        end
    end

    class Label < Widget
        attr_reader :text

        def initialize(text)
            @text = text

            Gtk.queue {
                @widget = Gtk::Label.new(@text)
                @widget.set_alignment(0, 0)
            }
        end
    end

    class NotebookPage < Table
        attr_reader :title, :container

        def initialize(page_title, container, rows=1, columns=1)
            @title = page_title
            @container = container
            super(rows, columns)
        end
    end

    class NotebookWindow < BaseWindow
        attr_reader :container, :notebook, :pages
        protected :container, :notebook, :pages

        def initialize(title, height, width)
            # Call super() first since it creates the base window
            super(title, height, width)

            @pages = Array.new

            Gtk.queue {
                @notebook = Gtk::Notebook.new
                @notebook.set_show_border(true)
                @notebook.set_tab_border(3)
                @window.add(@notebook)

                @notebook.signal_connect_after('switch-page') {|me, page, number|
                    Gtk.queue {
                        begin
                            @pages[number].container.on_activate
                        rescue
                            echo "switch-page error"
                            echo "#{$!.backtrace.join("\n\t")}"
                        end
                    }
                }
            }

            self.resizable = false
        end

        def run
            super()
        end

        def add_page(page)
            label = Jgtk::Label.new(page.title)
            @pages.push(page)

            Gtk.queue {
                @notebook.append_page(page.widget, label.widget)
                @notebook.show_all
            }
        end
    end

    class Table < Widget
        attr_reader :rows, :columns, :rows_used, :columns_used

        def initialize(rows=1, columns=1)
            @rows = rows
            @columns = columns

            @rows_used = 0
            @columns_used = 0

            Gtk.queue {
                @widget = Gtk::Table.new(@rows, @columns, true)
                @widget.border_width = 10
            }
        end

        def add_widget(widget, position)
            Gtk.queue {
                @widget.attach_defaults(widget.widget, position.left, position.right, position.top, position.bottom)
            }
        end

        def remove_widget(widget)
            Gtk.queue {
                @widget.remove(widget.widget)
            }
        end
    end

    class TablePosition
        attr_reader :bottom, :left, :top, :right

        def initialize(left, right, top, bottom)
            @bottom = bottom
            @left = left
            @top = top
            @right = right
        end
    end

    class TextBox < Widget
        def initialize(text=nil)
            Gtk.queue {
                @widget = Gtk::Entry.new()

                if (!text.nil?)
                    @widget.text = text
                end

                @widget.editable = false
            }
        end

        def enabled?
            value = nil

            Gtk.queue {
                value = @widget.editable?
            }

            return value
        end

        def enabled=(bool)
            Gtk.queue {
                @widget.editable = bool
            }
        end

        def text=(newtext)
            Gtk.queue {
                @widget.text = newtext
            }
        end

        def text
            return @widget.text
        end
    end

    class Widget
        attr_reader :widget

        def hide
            @widget.hide
        end

        def show
            @widget.show
        end
    end
end
