=begin

    Creatures and hunting areas atlas.  Requires atlas_data.db to also
    be downloaded and must be ;trust'ed so it can use that data.

     author: Jymamon (gs4-jymamon@hotmail.com)
       game: Gemstone
       tags: creature,critter,hunting
    version: 2017.01.13.01 - Split into modules
       repo: https://github.com/jymamon/lichscripts

    History:
        2017.01.13.01 - Split into modules
        2017.01.12.02 - Fixed broken area activation
        2017.01.12.01 - Display creatures for area in a treeview
        2017.01.11.01 - Add area add/delete/edit
        2017.01.10.01 - Add filtering by level. Add area deletion.
        2016.12.31.01 - Initial release.

=end

if File.file?("#{$script_dir}/moduleloader.lic")
    load("#{$script_dir}/moduleloader.lic")
else
    echo "\n\nmoduleloader.lic is required: ';repos download moduleloader.lic'\n\n."
    exit
end

ModuleLoader::load_support_script("JGTK", "2017.01.13.01")
ModuleLoader::load_support_script("AtlasDatabase", "2017.01.13.01")

# ------------------------------------------------------------------------------
# Atlas specific GUI
# ------------------------------------------------------------------------------
quiet_exit

module Atlas
    if $development
        # Before exiting, undef the class so we can redefine them next run.
        before_dying {
            echo "Cleaning up Atlas"

            Atlas.constants.each{|c|
                echo "-- Removing #{c}"
                Atlas.send(:remove_const, c)
            }
        }
    end

    class Application
        def Application.version
            return "2017.01.13.01"
        end

        # A bunch of common stuff across all of these pages.
        class CommonPageSetup
            attr_reader :page, :mode, :window

            def activate
                cancel_edit
            end

            def initialize(title, containing_window)
                @window = containing_window
                @page = JGTK::NotebookPage.new(title, self)


                self.add_dropdown(          JGTK::TablePosition.new( 0, 10,  0,  1))
                self.add_filter_button(     JGTK::TablePosition.new( 8, 10,  9, 10))

                self.add_delete_button(     JGTK::TablePosition.new( 2,  4, 11, 12))
                self.add_new_cancel_button( JGTK::TablePosition.new( 4,  6, 11, 12))
                self.add_edit_save_button(  JGTK::TablePosition.new( 6,  8, 11, 12))
                self.add_exit_button(       JGTK::TablePosition.new(10, 12, 11, 12))

                @mode = :display
            end

            def add_delete_button(postion)
                delete_button_proc = Proc.new {
                    self.delete(@dropdown.text)
                    @dropdown.remove_option();
                }

                @page.add_widget(delete_button = JGTK::Button.new("Delete", delete_button_proc), postion)
            end

            def add_dropdown(position)
                @dropdown = JGTK::ComboBox.new("", Array.new)

                @dropdown.onchange(
                    Proc.new{|active|
                        # How do I simulate a button click instead
                        # to avoid this repetion.
                        if ( @mode == :edit )
                            self.set_display_mode
                            self.cancel_edit

                        elsif (@mode == :new )
                            self.set_display_mode
                            self.cancel_new

                        end

                        self.dropdown_changed(active)
                    });

                self.build_dropdown

                @page.add_widget(@dropdown, position)

                @dropdown.set_active(0);
            end

            def add_edit_save_button(position)
                @edit_save_button = JGTK::Button.new("Edit")
                @page.add_widget(@edit_save_button, position)

                edit_save_button_proc = Proc.new {|this, text|
                    if @mode == :display
                        self.set_edit_mode
                        self.start_edit

                    elsif @mode == :edit
                        self.set_display_mode
                        self.save_edit

                    elsif @mode == :new
                        self.set_display_mode
                        self.save_new

                    else
                        echo "You messed that up."

                    end
                }

                @edit_save_button.onclick(edit_save_button_proc)
            end

            def add_exit_button(position)
                exit_button_proc = Proc.new {
                    @window.action = :exit
                }

                page.add_widget(JGTK::Button.new("Exit", exit_button_proc), position)
            end

            def add_filter_button(position)
                @filter_button = JGTK::Button.new("Filter")
                @page.add_widget(@filter_button, position)

                @page.add_widget(JGTK::Label.new("Min Level"),            JGTK::TablePosition.new(0, 2, 9, 10))
                @page.add_widget(@min_level_text = JGTK::TextBox.new(""), JGTK::TablePosition.new(2, 3, 9, 10))
                @min_level_text.enabled = true

                @page.add_widget(JGTK::Label.new("Max Level"),            JGTK::TablePosition.new(4, 6, 9, 10))
                @page.add_widget(@max_level_text = JGTK::TextBox.new(""), JGTK::TablePosition.new(6, 7, 9, 10))
                @max_level_text.enabled = true

                @page.add_widget(@filter_button, position)

                filter_button_proc = Proc.new {|this, text|
                    @dropdown.clear
                    min = @min_level_text.nil? ? -1 : @min_level_text.text.to_i
                    max = @max_level_text.nil? ? 10000 : @max_level_text.text.to_i
                    self.filter(min, max)
                    @dropdown.active = 0
                }

                @filter_button.onclick(filter_button_proc)
            end

            def add_new_cancel_button(position)
                @new_cancel_button = JGTK::Button.new("New")
                @page.add_widget(@new_cancel_button, position)

                new_cancel_button_proc = Proc.new{|this, text|
                    if @mode == :display
                        self.set_new_mode
                        self.start_new

                    elsif @mode == :edit
                        self.set_display_mode
                        self.cancel_edit

                        # Force any edits to be undone by
                        # setting to a different item then
                        # moving back to the currently selected
                        # item
                        restore = @dropdown.selected

                        if ( @dropdown.selected!=0 )
                            @dropdown.set_active(0);
                        else
                            @dropdown.set_active(1);
                        end

                        @dropdown.set_active(restore);

                    elsif @mode == :new
                        self.set_display_mode
                        @dropdown.set_active(0);
                        self.cancel_new

                    else
                        echo "You messed that up."

                    end
                }

                @new_cancel_button.onclick(new_cancel_button_proc)
            end

            def set_display_mode
                @edit_save_button.text = "Edit"
                @new_cancel_button.text = "New"
                @mode = :display
            end

            def set_edit_mode
                @edit_save_button.text = "Save"
                @new_cancel_button.text = "Cancel"
                @mode = :edit
            end

            def set_new_mode
                @edit_save_button.text = "Save"
                @new_cancel_button.text = "Cancel"
                @dropdown.set_active(-1)
                @mode = :new
            end
        end

        class AreasPage < CommonPageSetup
            attr_reader :page, :mode, :newcreatures

            def initialize(containing_window)
                super("Areas", containing_window)

                add_activate_button(JGTK::TablePosition.new(0,  2, 11, 12))
                build_display_fields

                @newcreatures.hide
                @remove_creature_button.hide
                @add_creature_button.hide
            end

            def delete(entry)
                entry =~ /^0*([1-9][0-9]*): (.*)$/;
                Areas.delete($1)
            end

            def add_activate_button(position)
                @activate_button = JGTK::Button.new("Activate")
                @page.add_widget(@activate_button, position)

                activate_button_proc = Proc.new {|this, text|
                    # TODO: Change this
                    creatures = Array.new;

                    @creatures.grid.model.each{|_model, path, iter|
                        creatures.push(iter[0])
                    }

                    UserVars.op['hunting_room_id']    = @start_text.text
                    UserVars.op['hunting_boundaries'] = @boundary_text.text
                    UserVars.op['targets']            = creatures.join(",");
                }

                @activate_button.onclick(activate_button_proc)
            end

            def add_creatures_display(position)
                @page.add_widget(@creatures = JGTK::GridView.new(), position)
            end

            def dropdown_changed(active)
                active =~ /^0*([1-9][0-9]*): (.*)$/;
                area = Areas.find_by_id($1);
                @id_text.text       = "#{'%04d' % $1}"
                @start_text.text    = "#{area.start}"
                @boundary_text.text = "#{area.boundaries.join(", ")}"

                @creatures.clear

                area.creatures.each{|c|
                    @creatures.add_option(c.name, "#{c.level}");
                }

                #@creatures.set_active(0)

                cancel_edit
            end

            def build_dropdown
                Areas.all().each{|a|
                   @dropdown.add_option("#{'%04d' % a.id}: #{a.region}", false)
                }
            end

            def build_display_fields
                @page.add_widget(JGTK::Label.new("ID"),                  JGTK::TablePosition.new(0, 2, 1, 2))
                @page.add_widget(JGTK::Label.new("Start"),               JGTK::TablePosition.new(0, 2, 2, 3))
                @page.add_widget(JGTK::Label.new("Boundaries"),          JGTK::TablePosition.new(0, 2, 3, 4))
                # TODO: Drop down that is 2-3 rows tall or other form of list.
                @page.add_widget(JGTK::Label.new("Targets"),             JGTK::TablePosition.new(0, 2, 4, 5))
                add_creatures_display(JGTK::TablePosition.new(2, 10, 4, 7))
                @page.add_widget(@id_text       = JGTK::TextBox.new(""), JGTK::TablePosition.new(2, 10, 1, 2))
                @page.add_widget(@start_text    = JGTK::TextBox.new(""), JGTK::TablePosition.new(2, 10, 2, 3))
                @page.add_widget(@boundary_text = JGTK::TextBox.new(""), JGTK::TablePosition.new(2, 10, 3, 4))

                @newcreatures = JGTK::ComboBox.new("", Array.new)

                @page.add_widget(@remove_creature_button = JGTK::Button.new("Del"), JGTK::TablePosition.new(11, 12, 4, 5))

                remove_creature_button_proc = Proc.new {|this, text|
                    @newcreatures.add_option(@creatures.text, true)
                    @creatures.remove_option
                }

                @remove_creature_button.onclick(remove_creature_button_proc)

                @page.add_widget(@add_creature_button = JGTK::Button.new("Add"), JGTK::TablePosition.new(11, 12, 7, 8))

                add_creature_button_proc = Proc.new {|this, text|
                    c = Creatures.find_by_name(@newcreatures.text, true).first
                    @creatures.add_option(c.name, "#{c.level}")
                    @newcreatures.remove_option
                }

                @add_creature_button.onclick(add_creature_button_proc)

                @page.add_widget(@newcreatures,                  JGTK::TablePosition.new(2, 10, 7, 8))

                @newcreatures.widget.child_visible = false

                cancel_edit
            end

            #----------------------------------------------------------------------------------------
            def cancel_edit
                @start_text.enabled    = false
                @boundary_text.enabled = false
                @newcreatures.clear
                @newcreatures.hide
                @remove_creature_button.hide
                @add_creature_button.hide
            end

            def cancel_new
                self.cancel_edit
            end

            def filter(min, max)
                Areas.all().find_all{|a|a.creatures.find{|c| c.level >= min && c.level <= max}}.each{|a|
                    @dropdown.add_option("#{'%04d' % a.id}: #{a.region}", false)
                }
            end

            def save_edit
                creatures = Array.new

                @creatures.widget.model.each{|_model, path, iter|
                    creatures.push(Creatures.find_by_name(iter[0]).first.id)
                }

                edited_area = Area.new(
                    @id_text.text.to_i,
                    @start_text.text.to_i,
                    @boundary_text.text.split(/\s*,\*/),
                    creatures);

                begin
                    Areas.delete(@id_text.widget.text.to_i)
                    Areas.insert(edited_area)
                rescue
                    echo "Failed!\n#{$!.backtrace.join("\n\t")}"
                end

                cancel_edit
            end

            def save_new
                new_id = Areas.ids.find_all{|i| i > 3000}.push(3000).max + 1

                creatures = Array.new

                @creatures.widget.model.each{|_model, path, iter|
                    creatures.push(Creatures.find_by_name(iter[0]).first.id)
                }

                newarea = Area.new(
                    new_id,
                    @start_text.text.to_i,
                    @boundary_text.text.split(',').map{|s| s.to_i},
                    creatures);

                begin
                    Areas.insert(newarea)
                    @dropdown.add_option("#{newarea.id}: #{newarea.region}", true)

                rescue
                    echo "Failed!\n#{$!.backtrace.join("\n\t")}"
                end

                cancel_edit
            end

            def start_edit
                begin
                    @start_text.enabled    = true
                    @boundary_text.enabled = true

                    @newcreatures.clear

                    @dropdown.text =~ /^0*([1-9][0-9]*): (.*)$/;
                    area = Areas.find_by_id($1);

                    Creatures.all.sort{|a, b| a.name.downcase <=> b.name.downcase}.each{|c|
                        if ( !area.creatures.map{|t| t.id}.include?(c.id) )
                            @newcreatures.add_option(c.name);
                        end
                    }

                    @newcreatures.set_active(0)
                    @newcreatures.widget.show
                    @remove_creature_button.show
                    @add_creature_button.show
                rescue
                    echo "Failed!\n#{$!.backtrace.join("\n\t")}"
                end
            end

            def start_new
                @id_text.text       = "Unassigned"
                @start_text.text    = ""
                @boundary_text.text = ""
                self.start_edit

                @creatures.clear
                @newcreatures.clear
                Creatures.all.sort{|a, b| a.name.downcase <=> b.name.downcase}.each{|c|
                    @newcreatures.add_option(c.name);
                }

                @newcreatures.set_active(0)
            end
            #----------------------------------------------------------------------------------------
        end

        class CreaturesPage < CommonPageSetup
            def initialize(containing_window)
                super("Creatures", containing_window)
                self.build_display_fields
            end

            def build_dropdown
                Creatures.all().sort{|a, b| a.name.downcase <=> b.name.downcase}.each{|c|
                    @dropdown.add_option("#{c.name}", false)
                }
            end

            def build_display_fields
                @page.add_widget(JGTK::Label.new("ID"),                            JGTK::TablePosition.new(0, 1, 1, 2))
                @page.add_widget(JGTK::Label.new("Name"),                          JGTK::TablePosition.new(0, 1, 2, 3))
                @page.add_widget(JGTK::Label.new("Level"),                         JGTK::TablePosition.new(0, 1, 3, 4))
                @page.add_widget(JGTK::Label.new("Type"),                          JGTK::TablePosition.new(0, 1, 4, 5))
                @page.add_widget(JGTK::Label.new("Skin"),                          JGTK::TablePosition.new(0, 1, 5, 6))

                @page.add_widget(@id_text    = JGTK::TextBox.new(""),              JGTK::TablePosition.new(1, 10, 1, 2))
                @page.add_widget(@name_text  = JGTK::TextBox.new(""),              JGTK::TablePosition.new(1, 10, 2, 3))
                @page.add_widget(@level_text = JGTK::TextBox.new(""),              JGTK::TablePosition.new(1, 10, 3, 4))
                @page.add_widget(@is_undead  = JGTK::CheckButton.new("Undead?"),   JGTK::TablePosition.new(1,  4, 4, 5))
                @page.add_widget(@is_noncorp = JGTK::CheckButton.new("Non-Corp?"), JGTK::TablePosition.new(4,  8, 4, 5))
                @page.add_widget(@is_hated   = JGTK::CheckButton.new("Hated?"),    JGTK::TablePosition.new(8, 10, 4, 5))
                @page.add_widget(@skin_text  = JGTK::TextBox.new(""),              JGTK::TablePosition.new(1, 10, 5, 6))
            end

            def cancel_edit
                @name_text.enabled  = false
                @is_undead.enabled  = false
                @is_noncorp.enabled = false
                @is_hated.enabled   = false
                @level_text.enabled = false
                @skin_text.enabled  = false
            end

            def cancel_new
            end

            def dropdown_changed(active)
                creature = Creatures.find_by_name(active, true).first;

                @id_text.text       = "#{'%04d' % creature.id}"
                @name_text.text     = creature.name
                @is_undead.checked  = creature.undead
                @is_noncorp.checked = creature.noncorp
                @is_hated.checked   = creature.hated

                @level_text.text    = "#{creature.level==999 ? 'scaling' : creature.level}"
                @skin_text.text     = "#{creature.skin || 'none'}"
            end

            def delete(entry)
                creature_to_delete = entry.to_i
                Creatures.delete(creature_to_delete)
            end

            def filter(min, max)
                Creatures.find_by_level(min, max).sort{|a, b| a.name.downcase <=> b.name.downcase}.each{|c|
                    @dropdown.add_option("#{c.name}", false)
                }
            end

            def save_edit
                edited_creature = Creature.new(
                    @id_text.widget.text.to_i,
                    @level_text.widget.text.to_i,
                    @name_text.text,
                    @skin_text.text,
                    @is_undead.checked?,
                    @is_noncorp.checked?,
                    @is_hated.checked?)
                begin
                    Creatures.insert(edited_creature)
                rescue
                    echo "Failed!\n#{$!.backtrace.join("\n\t")}"
                end
            end

            def save_new
                new_id = -1;

                if ( @level_text.widget.text!="Scaling" )
                    new_id = Creatures.ids.find_all{|i| i < 9000}.max + 1
                else
                    new_id = Creatures.ids.max + 1
                end

                begin
                    edited_creature = Creature.new(
                        new_id,
                        @level_text.widget.text.to_i,
                        @name_text.text,
                        @skin_text.text,
                        @is_undead.checked?,
                        @is_noncorp.checked?,
                        @is_hated.checked?)

                    begin
                        Creatures.insert(edited_creature)
                        @dropdown.add_option(@name_text.text, true)
                    rescue
                        echo "Failed!\n#{$!.backtrace.join("\n\t")}"
                    end
                rescue
                    echo "Invalid creature!"
                end
            end

            def start_edit
                @name_text.enabled  = true
                @is_undead.enabled  = true
                @is_noncorp.enabled = true
                @is_hated.enabled   = true
                @level_text.enabled = true
                @skin_text.enabled  = true
            end

            def start_new
                @id_text.text       = "Unassigned"
                @name_text.text     = ""
                @is_undead.checked  = false
                @is_noncorp.checked = false
                @is_hated.checked   = false

                @level_text.text    = ""
                @skin_text.text     = ""
            end
        end

        attr_reader :window

        def initialize
            @window = JGTK::NotebookWindow.new("Atlas v#{Application.version} - #{Char.name}", 400, 300)
            
            pages = [
                AreasPage::new(@window).page,
                CreaturesPage::new(@window).page
            ];
            
            pages.each{|p|
                @window.add_page(p)
            }
        end

        def run
            @window.run
        end
    end
end

Atlas::Application.new.run()
